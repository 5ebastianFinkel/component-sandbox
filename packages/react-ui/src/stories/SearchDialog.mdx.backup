import { Meta, Story, Canvas, Controls } from '@storybook/addon-docs/blocks';
import { SearchDialogProvider, SearchDialog } from '../components/SearchDialog';
import * as SearchDialogStories from '../components/SearchDialog/SearchDialog.stories.tsx';

<Meta title="Components/SearchDialog/Documentation" />

# Search Dialog Component

The `SearchDialog` component provides a powerful, keyboard-driven search interface for Storybook that allows users to quickly find stories and documentation. It features real-time search, keyboard navigation, search history, and advanced search shortcuts.

## Overview

The Search Dialog is built with performance and usability in mind. It uses FlexSearch for fast full-text search, implements virtualization for large result sets, and provides a rich set of features including search history, shortcuts, and intelligent result ranking.

## Features

- üîç **Fast Search**: Powered by FlexSearch with dual-index architecture
- ‚å®Ô∏è **Keyboard Shortcuts**: Global CMD/CTRL+K shortcut and navigation
- üìö **Content Types**: Searches both stories and documentation
- üè∑Ô∏è **Advanced Filtering**: Search shortcuts for precise filtering
- üìñ **Search History**: Persistent search history with localStorage
- üéØ **Smart Ranking**: Relevance-based result scoring
- ‚ôø **Accessible**: Full keyboard navigation and ARIA support
- üì± **Responsive**: Mobile-friendly design
- ‚ö° **Performance**: Caching, debouncing, and virtualization
- üåô **Dark Mode**: Full dark mode support

## Installation

The SearchDialog is part of the component library and requires no additional installation.

## Basic Usage

### With Provider (Recommended)

<Canvas of={SearchDialogStories.WithProvider} />

The `SearchDialogProvider` is the easiest way to add global search to your Storybook. It automatically handles the CMD/CTRL+K shortcut and provides navigation integration.

```tsx
import { SearchDialogProvider } from '@component-sandbox/react-ui';

function App() {
  return (
    <SearchDialogProvider>
      <YourApp />
    </SearchDialogProvider>
  );
}
```

### Controlled Usage

<Canvas of={SearchDialogStories.Default} />

For more control, you can use the `SearchDialog` component directly:

```tsx
import { SearchDialog } from '@component-sandbox/react-ui';
import { useState } from 'react';

function MyComponent() {
  const [open, setOpen] = useState(false);

  const handleSelect = (result) => {
    console.log('Selected:', result);
    // Handle navigation
  };

  return (
    <SearchDialog
      open={open}
      onOpenChange={setOpen}
      onSelect={handleSelect}
    />
  );
}
```

## Search Shortcuts

The Search Dialog supports powerful shortcuts for refined searching:

| Shortcut | Description | Example |
|----------|-------------|---------|
| `s:` | Search stories only | `s:button` |
| `d:` | Search documentation only | `d:getting started` |
| `c:` | Search by component name | `c:mermaid` |
| `t:` | Search by tags | `t:form` |
| `h:` | Search headings in docs | `h:installation` |
| `new:` | Search recent content | `new:component` |

### Shortcut Examples

```
s:button           # Find all button-related stories
d:api              # Find documentation containing "api"
c:mermaid          # Find components named "mermaid"
t:accessibility    # Find content tagged with "accessibility"
h:getting started  # Find docs with "getting started" headings
```

## API Reference

### SearchDialog Props

```typescript
interface SearchDialogProps {
  open: boolean;                    // Controls dialog visibility
  onOpenChange: (open: boolean) => void;  // Called when dialog opens/closes
  onSelect?: (result: SearchResult) => void;  // Called when result is selected
  placeholder?: string;             // Search input placeholder
  maxResults?: number;              // Maximum results to show (default: 50)
  virtualizationThreshold?: number; // When to use virtualization (default: 20)
}
```

### SearchDialogProvider Props

```typescript
interface SearchDialogProviderProps {
  children: React.ReactNode;        // App content
  onNavigate?: (result: SearchResult) => void;  // Custom navigation handler
  onError?: (error: Error, result: SearchResult) => void;  // Error handler
}
```

### SearchResult Interface

```typescript
interface SearchResult {
  id: string;                       // Unique identifier
  title: string;                    // Display title
  type: 'story' | 'docs';          // Content type
  path: string;                     // Navigation path
  tags?: string[];                  // Associated tags
  headings?: string[];              // Document headings (docs only)
  description?: string;             // Content description
  componentName?: string;           // Component name (stories only)
}
```

## Keyboard Navigation

The Search Dialog provides full keyboard navigation:

| Key | Action |
|-----|--------|
| `CMD/CTRL + K` | Open search dialog |
| `ESC` | Close dialog |
| `‚Üë` / `‚Üì` | Navigate results |
| `Enter` | Select highlighted result |
| `Tab` | Navigate within dialog |

## Performance Features

### Caching

- **Search Result Caching**: Results are cached with TTL for improved performance
- **Query Deduplication**: Identical queries return cached results instantly
- **Smart Cache Invalidation**: Automatic cleanup of expired entries

### Virtualization

For large result sets (>20 items by default), the dialog automatically uses virtualization to maintain smooth scrolling performance.

### Debouncing

Search queries are debounced by 150ms to prevent excessive API calls while maintaining responsive feel.

## Search History

The Search Dialog automatically tracks search history and provides:

- **Recent Searches**: Quick access to recent queries
- **Popular Searches**: Frequency-based search suggestions
- **Persistent Storage**: History persists across browser sessions
- **Privacy Controls**: Users can clear history as needed

## Customization

### Custom Navigation

```tsx
<SearchDialogProvider
  onNavigate={(result) => {
    // Custom navigation logic
    window.location.href = result.path;
  }}
  onError={(error, result) => {
    // Custom error handling
    console.error('Navigation failed:', error);
  }}
>
  <App />
</SearchDialogProvider>
```

### Custom Placeholder

```tsx
<SearchDialog
  placeholder="Search components and docs..."
  // ... other props
/>
```

### Performance Tuning

```tsx
<SearchDialog
  maxResults={100}                    // More results
  virtualizationThreshold={50}        // Later virtualization
  // ... other props
/>
```

## Accessibility

The Search Dialog is fully accessible and provides:

- **ARIA Labels**: Proper labeling for screen readers
- **Focus Management**: Automatic focus handling
- **Keyboard Navigation**: Complete keyboard accessibility
- **Screen Reader Support**: Announcements for state changes
- **High Contrast**: Support for high contrast modes

## Browser Support

- **Modern Browsers**: Chrome, Firefox, Safari, Edge (latest versions)
- **Mobile Browsers**: iOS Safari, Chrome Mobile
- **Keyboard Support**: All platforms with keyboard input
- **Touch Support**: Mobile touch interactions

## Performance Metrics

Target performance metrics:

- **Search Response**: &lt;50ms for typical queries
- **Initial Load**: &lt;200ms for dialog appearance
- **Smooth Scrolling**: 60fps with virtualization
- **Memory Usage**: Efficient caching with cleanup
- **Bundle Size**: Minimal impact on app bundle

## Best Practices

1. **Use SearchDialogProvider** for global search functionality
2. **Customize Navigation** for your specific routing needs
3. **Handle Errors** gracefully with custom error handlers
4. **Test Keyboard Navigation** across all user flows
5. **Monitor Performance** with large datasets
6. **Provide Clear Shortcuts** documentation to users

## Troubleshooting

### Search Not Working

- Ensure search index is properly built
- Check browser console for errors
- Verify data extraction is working

### Poor Performance

- Reduce `maxResults` for large datasets
- Lower `virtualizationThreshold` for earlier virtualization
- Check for memory leaks in custom handlers

### Navigation Issues

- Verify `onNavigate` handler is correctly implemented
- Check that paths are valid for your routing system
- Ensure error handling is in place

## Examples

### Integration with React Router

```tsx
import { useNavigate } from 'react-router-dom';

function App() {
  const navigate = useNavigate();

  return (
    <SearchDialogProvider
      onNavigate={(result) => {
        navigate(result.path);
      }}
    >
      <YourApp />
    </SearchDialogProvider>
  );
}
```

### Custom Error Handling

```tsx
<SearchDialogProvider
  onError={(error, result) => {
    // Log error
    console.error('Search navigation failed:', error);
    
    // Show user-friendly message
    toast.error(`Could not navigate to ${result.title}`);
    
    // Fallback navigation
    window.open(result.path, '_blank');
  }}
>
  <App />
</SearchDialogProvider>
```

The Search Dialog component provides a comprehensive solution for content discovery in Storybook, combining powerful search capabilities with excellent user experience and performance.